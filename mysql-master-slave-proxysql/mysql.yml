namespace: monk-mysql-proxysql


master: 
  defines: runnable
  variables:
    image-tag:
      type: string
      value: <- $image_tag
    rpc-port:
      type: int
      value: 3306
    database_name:
      type: string
      env: MYSQL_DATABASE
      value: <- $mysql_database_name
    database_user:
      env: MYSQL_USER
      type: string
      value: <- $mysql_database_user
    mpassword: 
      env: MYSQL_PASSWORD
      type: string
      value: <- $mysql_database_password
    database_root_password:
      env: MYSQL_ROOT_PASSWORD
      value: <- $mysql_database_root_password
      type: string
    mysql_master_data:
      type: string
      value: mysql-master-data
  containers:
    mysql-master:
      paths:
        - <- `${monk-volume-path}/${mysql_master_data}:/var/lib/mysql`
        - <- `/Users/burakhan/www/monkd/monk-mysql/mysql-master-slave/config/master:/etc/mysql/conf.d/`
      ports:
        - <- `0.0.0.0:${rpc-port}:3306`
      
      image-tag: <- `${image-tag}`
      image: mysql
  files:
    defines: files
    my-file:
      raw: true
      contents: |
        [mysqld]
        server-id=1
        log-bin=mysql-bin
        log-slave-updates=1
        datadir=/var/lib/mysql/
        innodb_flush_log_at_trx_commit = 2
        innodb_flush_method = O_DIRECT
        skip-host-cache
        skip-name-resolve
      container: mysql-master
      path: /etc/mysql/conf.d/master.cnf
      mode: 600

slave: 
  defines: runnable
  variables:
    image-tag:
      type: string
      value: <- $image_tag
    rpc-port:
      type: int
      value: 3307
    database_user:
      env: MYSQL_USER
      type: string
      value: <- $mysql_database_user
    mpassword: 
      env: MYSQL_PASSWORD
      type: string
      value: <- $mysql_database_password
    database_root_password:
      env: MYSQL_ROOT_PASSWORD
      value: <- $mysql_database_root_password
      type: string
    mysql_slave_data:
      type: string
      value: mysql-slave-data
  containers:
    mysql-slave:
      ports:
        - <- `0.0.0.0:${rpc-port}:3306`
      command: '--server-id=8' 
      image-tag: <- `${image-tag}`
      paths:
        - <- `${monk-volume-path}/${mysql_slave_data}:/var/lib/mysql`
        - <- `/Users/burakhan/www/monkd/monk-mysql/mysql-master-slave/config/slave:/etc/mysql/conf.d/`
      image: mysql
  files:
    defines: files
    my-file:
      raw: true
      contents: |
        [mysqld]
        server-id=9
        log-bin=mysql-bin
        log-slave-updates=1
        auto_increment_increment=2
        auto_increment_offset=2
        datadir=/var/lib/mysql
        read-only=1
        slave-skip-errors = 1062
        skip-host-cache
        skip-name-resolve
      container: mysql-slave
      path: /etc/mysql/conf.d/slave1.cnf
      mode: 600

configure: 
  defines: runnable
  variables:
    image-tag:
      type: string
      value: <- $image_tag
    mysql_slave_password:
      type: string
      env: MYSQL_SLAVE_PASSWORD
      value: <- $mysql_database_root_password
    mysql_master_password:
      env: MYSQL_MASTER_PASSWORD
      type: string
      value: <- $mysql_database_root_password
    mysql_repl_user: 
      env: MYSQL_REPLICATION_USER
      type: string
      value: <- $mysql_replication_user
    mysql_repl_password:
      env: MYSQL_REPLICATION_PASSWORD
      value: <- $mysql_database_root_password
      type: string
    mysql_password:
      env: MYSQL_ROOT_PASSWORD
      value: <- $mysql_database_root_password
      type: string
    mysql-master-host:
      env: MYSQL_MASTER_HOST
      type: string
      value: <- get-hostname("monk-mysql/master", "mysql-master") split(".dns.podman") join("")
    mysql-slave-host:
      env: MYSQL_SLAVE_HOST
      type: string
      value: <- get-hostname("monk-mysql/slave", "mysql-slave") split(".dns.podman") join("")
  containers:
    mysql-configure:
      bash: /tmp/init.sh
      image-tag: <- `${image-tag}`
      image: mysql
  files:
    defines: files
    my-file:
      raw: true
      contents: |
        #!/bin/bash
        BASE_PATH=$(dirname $0)

        echo "Waiting for mysql to get up"
        # Give 60 seconds for master and slave to come up
        sleep 60

        echo "Create MySQL Servers (master / slave repl)"
        echo "-----------------"


        echo "* Create replication user"

        mysql --host $MYSQL_SLAVE_HOST -uroot -p$MYSQL_SLAVE_PASSWORD -AN -e 'STOP SLAVE;';
        mysql --host $MYSQL_SLAVE_HOST -uroot -p$MYSQL_MASTER_PASSWORD -AN -e 'RESET SLAVE ALL;';
        mysql --host $MYSQL_MASTER_HOST -uroot -p$MYSQL_MASTER_PASSWORD -AN -e "CREATE USER '$MYSQL_REPLICATION_USER'@'%' IDENTIFIED WITH mysql_native_password BY '$MYSQL_REPLICATION_PASSWORD';"
        mysql --host $MYSQL_MASTER_HOST -uroot -p$MYSQL_MASTER_PASSWORD -AN -e "GRANT REPLICATION SLAVE ON *.* TO '$MYSQL_REPLICATION_USER'@'%';"
        mysql --host $MYSQL_MASTER_HOST -uroot -p$MYSQL_MASTER_PASSWORD -AN -e 'flush privileges;'


        echo "* Set MySQL01 as master on MySQL02"

        MYSQL01_Position=$(eval "mysql --host $MYSQL_MASTER_HOST -uroot -p$MYSQL_MASTER_PASSWORD -e 'show master status \G' | grep Position | sed -n -e 's/^.*: //p'")
        MYSQL01_File=$(eval "mysql --host $MYSQL_MASTER_HOST -uroot -p$MYSQL_MASTER_PASSWORD -e 'show master status \G'     | grep File     | sed -n -e 's/^.*: //p'")
        MASTER_IP=$(eval "getent hosts $MYSQL_MASTER_HOST|awk '{print \$1}'")
        echo $MASTER_IP
        mysql --host $MYSQL_SLAVE_HOST -uroot -p$MYSQL_SLAVE_PASSWORD -AN -e "CHANGE MASTER TO master_host='$MYSQL_MASTER_HOST', master_port=3306, \
                master_user='$MYSQL_REPLICATION_USER', master_password='$MYSQL_REPLICATION_PASSWORD', master_log_file='$MYSQL01_File', \
                master_log_pos=$MYSQL01_Position;"

        echo "* Set MySQL02 as master on MySQL01"

        MYSQL02_Position=$(eval "mysql --host $MYSQL_SLAVE_HOST -uroot -p$MYSQL_SLAVE_PASSWORD -e 'show master status \G' | grep Position | sed -n -e 's/^.*: //p'")
        MYSQL02_File=$(eval "mysql --host $MYSQL_SLAVE_HOST -uroot -p$MYSQL_SLAVE_PASSWORD -e 'show master status \G'     | grep File     | sed -n -e 's/^.*: //p'")

        SLAVE_IP=$(eval "getent hosts $MYSQL_SLAVE_HOST|awk '{print \$1}'")
        echo $SLAVE_IP
        mysql --host $MYSQL_MASTER_HOST -uroot -p$MYSQL_MASTER_PASSWORD -AN -e "CHANGE MASTER TO master_host='$MYSQL_SLAVE_HOST', master_port=3306, \
                master_user='$MYSQL_REPLICATION_USER', master_password='$MYSQL_REPLICATION_PASSWORD', master_log_file='$MYSQL02_File', \
                master_log_pos=$MYSQL02_Position;"

        echo "* Start Slave on both Servers"
        mysql --host $MYSQL_SLAVE_HOST -uroot -p$MYSQL_SLAVE_PASSWORD -AN -e "start slave;"

        echo "Increase the max_connections to 2000"
        mysql --host $MYSQL_MASTER_HOST -uroot -p$MYSQL_MASTER_PASSWORD -AN -e 'set GLOBAL max_connections=2000';
        mysql --host $MYSQL_SLAVE_HOST -uroot -p$MYSQL_SLAVE_PASSWORD -AN -e 'set GLOBAL max_connections=2000';

        mysql --host $MYSQL_SLAVE_HOST -uroot -p$MYSQL_MASTER_PASSWORD -e "show slave status \G"

        echo "MySQL servers created!"
        echo "--------------------"
        echo
        echo Variables available fo you :-
        echo
        echo MYSQL01_IP       : $MYSQL_MASTER_HOST
        echo MYSQL02_IP       : $MYSQL_SLAVE_HOST
      container: mysql-configure
      path: /tmp/init.sh
      mode: 755
  depends:
    wait-for:
        runnables:
            - monk-mysql/master
            - monk-mysql/slave
        timeout: 60


lb: 
  defines: runnable
  variables:
    mysql-master-host:
      env: MYSQL_MASTER_HOST
      type: string
      value: <- get-hostname("monk-mysql-proxysql/master", "mysql-master") split(".dns.podman") join("")
    mysql-slave-host: 
      env: MYSQL_SLAVE_HOST
      type: string
      value: <- get-hostname("monk-mysql-proxysql/slave", "mysql-slave") split(".dns.podman") join("")
    my-hostname:
      env: MYSQL_PROXY_HOST
      type: string
      value: <- get-hostname("monk-mysql-proxysql/lb", "monk-proxysql") split(".dns.podman") join("")
    mysql_password:
      env: MYSQL_ROOT_PASSWORD
      value: <- $mysql_database_root_password
    proxysql_data:
      type: string
      value: proxysql-data
  containers:
    monk-proxysql:
      ports:
        - <- `0.0.0.0:6032:6032`
        - <- `0.0.0.0:6033:6033`
      paths:
        - <- `${monk-volume-path}/${proxysql_data}:/var/lib/proxysql`
        - <- `/Users/burakhan/www/monkd/monk-mysql/mysql-master-slave-proxysql/config/proxysql:/etc/mysql/conf.d/`  
      image: severalnines/proxysql
