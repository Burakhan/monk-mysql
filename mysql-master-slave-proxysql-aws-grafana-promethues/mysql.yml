namespace: monk-mysql-proxysql


master: 
  defines: runnable
  variables:
    image-tag:
      type: string
      value: <- $image_tag
    rpc-port:
      type: int
      value: 3306
    database_name:
      type: string
      env: MYSQL_DATABASE
      value: <- $mysql_database_name
    database_user:
      env: MYSQL_USER
      type: string
      value: <- $mysql_database_user
    mpassword: 
      env: MYSQL_PASSWORD
      type: string
      value: <- $mysql_database_password
    database_root_password:
      env: MYSQL_ROOT_PASSWORD
      value: <- $mysql_database_root_password
      type: string
    mysql_master_data:
      type: string
      value: mysql-master-data
  containers:
    mysql-master:
      paths:
        - <- `${monk-volume-path}/${mysql_master_data}:/var/lib/mysql`
      ports:
        - <- `0.0.0.0:${rpc-port}:3306`
      image-tag: <- `${image-tag}`
      image: mysql
  files:
    my-file:
      raw: true
      contents: |
        [mysqld]
        server-id=1
        log-bin=mysql-bin
        log-slave-updates=1
        datadir=/var/lib/mysql/
        innodb_flush_log_at_trx_commit = 2
        innodb_flush_method = O_DIRECT
        skip-host-cache
        skip-name-resolve
        default-authentication-plugin=mysql_native_password
      container: mysql-master
      path: /etc/mysql/conf.d/master.cnf
      mode: 644

slave: 
  defines: runnable
  variables:
    image-tag:
      type: string
      value: <- $image_tag
    rpc-port:
      type: int
      value: 3307
    database_user:
      env: MYSQL_USER
      type: string
      value: <- $mysql_database_user
    mpassword:
      env: MYSQL_PASSWORD
      type: string
      value: <- $mysql_database_password
    database_root_password:
      env: MYSQL_ROOT_PASSWORD
      value: <- $mysql_database_root_password
      type: string
    mysql_slave_data:
      type: string
      value: mysql-slave-data
  containers:
    mysql-slave:
      ports:
        - <- `0.0.0.0:${rpc-port}:3306`
      image-tag: <- `${image-tag}`
      paths:
        - <- `${monk-volume-path}/${mysql_slave_data}:/var/lib/mysql`
      image: mysql
  files:
    defines: files
    my-file:
      raw: true
      contents: |
        [mysqld]
        server-id=9
        log-bin=mysql-bin
        log-slave-updates=1
        auto_increment_increment=2
        auto_increment_offset=2
        datadir=/var/lib/mysql
        read-only=1
        slave-skip-errors = 1062
        skip-host-cache
        skip-name-resolve
        default-authentication-plugin=mysql_native_password
      container: mysql-slave
      path: /etc/mysql/conf.d/slave1.cnf
      mode: 644

configure: 
  defines: runnable
  variables:
    image-tag:
      type: string
      value: <- $image_tag
    mysql_slave_password:
      type: string
      env: MYSQL_SLAVE_PASSWORD
      value: <- $mysql_database_root_password
    mysql_master_password:
      env: MYSQL_MASTER_PASSWORD
      type: string
      value: <- $mysql_database_root_password
    mysql_repl_user: 
      env: MYSQL_REPLICATION_USER
      type: string
      value: <- $mysql_replication_user
    mysql_repl_password:
      env: MYSQL_REPLICATION_PASSWORD
      value: <- $mysql_database_root_password
      type: string
    mpassword:
      env: MYSQL_ROOT_PASSWORD
      value: <- $mysql_database_root_password
      type: string
    monitor_user_password:
      env: MYSQL_MONITOR_PASSWORD
      value: <- $mysql_database_monitor_password
      type: string
    monitor_user:
      env: MYSQL_MONITOR_USER
      value: <- $mysql_database_monitor_user
      type: string
    mysql-master-host:
      env: MYSQL_MASTER_HOST
      type: string
      value: <- get-hostname("monk-mysql-proxysql/master", "mysql-master") split(".dns.podman") join("")
    mysql-slave-host:
      env: MYSQL_SLAVE_HOST
      type: string
      value: <- get-hostname("monk-mysql-proxysql/slave", "mysql-slave") split(".dns.podman") join("")
  containers:
    mysql-configure:
      bash: /tmp/init.sh
      image-tag: <- `${image-tag}`
      image: mysql
  files:
    defines: files
    my-file:
      raw: true
      contents: |
        #!/bin/sh
        sleep 20
        while ! mysqladmin ping -u root -h $MYSQL_MASTER_HOST -p$MYSQL_ROOT_PASSWORD -h $MYSQL_MASTER_HOST --silent; do
          sleep 1
        done

        mysql -u root -h $MYSQL_MASTER_HOST -p$MYSQL_ROOT_PASSWORD  -e "RESET MASTER;"
        mysql -u root -h $MYSQL_MASTER_HOST -p$MYSQL_ROOT_PASSWORD  -e "FLUSH TABLES WITH READ LOCK;"

        mysqldump -uroot -h $MYSQL_MASTER_HOST  -p$MYSQL_ROOT_PASSWORD --all-databases --source-data --single-transaction --flush-logs --events --result-file=/tmp/master_dump.sql

        mysql -h $MYSQL_SLAVE_HOST -u root -p$MYSQL_ROOT_PASSWORD -e "STOP SLAVE;";
        mysql -h $MYSQL_SLAVE_HOST -u root -p$MYSQL_ROOT_PASSWORD < /tmp/master_dump.sql

        # masterに繋いで bin-logのファイル名とポジションを取得する
        log_file=`mysql -u root -p$MYSQL_ROOT_PASSWORD -h $MYSQL_MASTER_HOST -e "SHOW MASTER STATUS\G" | grep File: | awk '{print $2}'`
        pos=`mysql -u root -p$MYSQL_ROOT_PASSWORD -h $MYSQL_MASTER_HOST -e "SHOW MASTER STATUS\G" | grep Position: | awk '{print $2}'`

        # slaveの開始
        mysql -u root -p$MYSQL_ROOT_PASSWORD -h $MYSQL_SLAVE_HOST -e "RESET SLAVE";
        mysql -u root -p$MYSQL_ROOT_PASSWORD -h $MYSQL_SLAVE_HOST -e "CHANGE MASTER TO MASTER_HOST='$MYSQL_MASTER_HOST', MASTER_USER='root', MASTER_PASSWORD='$MYSQL_ROOT_PASSWORD', MASTER_LOG_FILE='${log_file}', MASTER_LOG_POS=${pos};"
        mysql -u root -p$MYSQL_ROOT_PASSWORD -h $MYSQL_SLAVE_HOST -e "start slave"

        # masterをunlockする
        mysql -u root -p$MYSQL_ROOT_PASSWORD -h $MYSQL_MASTER_HOST -e "UNLOCK TABLES;"
        mysql -u root -p$MYSQL_ROOT_PASSWORD -h $MYSQL_MASTER_HOST -e "ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY '$MYSQL_ROOT_PASSWORD';"
        mysql -u root -p$MYSQL_ROOT_PASSWORD -h $MYSQL_MASTER_HOST -e "CREATE USER '$MYSQL_MONITOR_USER'@'%' IDENTIFIED BY '$MYSQL_MONITOR_PASSWORD';"
        mysql -u root -p$MYSQL_ROOT_PASSWORD -h $MYSQL_MASTER_HOST -e "FLUSH PRIVILEGES;"
      container: mysql-configure
      path: /tmp/init.sh
      mode: 755
  depends:
    wait-for:
        runnables:
            - monk-mysql-proxysql/master
            - monk-mysql-proxysql/slave
        timeout: 60


lb: 
  defines: runnable
  variables:
    mysql-master-host:
      env: MYSQL_MASTER_HOST
      type: string
      value: <- get-hostname("monk-mysql-proxysql/master", "mysql-master") split(".dns.podman") join("")
    mysql-slave-host: 
      env: MYSQL_SLAVE_HOST
      type: string
      value: <- get-hostname("monk-mysql-proxysql/slave", "mysql-slave") split(".dns.podman") join("")
    my-hostname:
      env: MYSQL_PROXY_HOST
      type: string
      value: <- get-hostname("monk-mysql-proxysql/lb", "monk-proxysql") split(".dns.podman") join("")
    mpassword:
      env: MYSQL_ROOT_PASSWORD
      type: string
      value: <- $mysql_database_root_password
    monitor_user_password:
      env: MYSQL_MONITOR_PASSWORD
      value: <- $mysql_database_monitor_password
      type: string
    monitor_user:
      env: MYSQL_MONITOR_USER
      value: <- $mysql_database_monitor_user
      type: string
    proxysql_data:
      type: string
      value: proxysql-data
  containers:
    monk-proxysql:
      ports:
        - <- `0.0.0.0:6032:6032`
        - <- `0.0.0.0:6033:6033`
      image: severalnines/proxysql
  files:
    my-file:
      contents: |
        datadir="/var/lib/proxysql"
        admin_variables=
        {
          admin_credentials="admin:admin"
          mysql_ifaces="0.0.0.0:6032"
          refresh_interval=2000
          admin-hash_passwords=false
        }

        mysql_variables=
        {
          threads=4
          max_connections=2048
          default_query_delay=0
          default_query_timeout=36000000
          have_compress=true
          poll_timeout=2000
          interfaces="0.0.0.0:6033;/tmp/proxysql.sock"
          default_schema="information_schema"
          stacksize=1048576
          server_version="5.1.30"
          connect_timeout_server=10000
          monitor_history=60000
          monitor_connect_interval=200000
          monitor_ping_interval=200000
          ping_interval_server_msec=10000
          ping_timeout_server=200
          commands_stats=true
          sessions_sort=true
          monitor_username="{{ v "monitor_user" }}"
          monitor_password="{{ v "monitor_user_password" }}"
          set_query_lock_on_hostgroup=0
        }

        mysql_replication_hostgroups =
        (
          {
            writer_hostgroup=0
            reader_hostgroup=1
            comment="host groups"
          }
        )

        mysql_servers =
        (
          { address="{{ v "mysql-master-host"}}", port=3306, hostgroup=0, max_connections=1000, max_replication_lag = 5 },
          { address="{{ v "mysql-slave-host"}}", port=3306, hostgroup=1, max_connections=1000, max_replication_lag = 5 }
        )

        # MySQL へ Proxy 経由で接続するユーザ記載
        mysql_users =
        (
          { username = "root", password = "{{ v "mpassword" }}",   default_hostgroup = 0, max_connections=1000, active = 1 }
        )

        mysql_query_rules =
        (
          {
            rule_id=1
            active=1
            match_pattern="^SELECT .* FOR UPDATE"
            destination_hostgroup=0
            apply=1
          },
          {
            rule_id=2
            active=1
            match_pattern="^SELECT .*"
            destination_hostgroup=1
            apply=1
          },
          {
            rule_id=3
            active=1
            match_pattern=".*"
            destination_hostgroup=0
            apply=1
          }
        )
      container: monk-proxysql
      path: /etc/proxysql.cnf
      mode: 644

promethues-mysql-master-exporter: 
  defines: runnable
  variables:
    database_name:
      type: string
      env: MYSQL_DATABASE
      value: <- $mysql_database_name
    mysql-master-host:
      env: MYSQL_MASTER_HOST
      type: string
      value: <- get-hostname("monk-mysql-proxysql/master", "mysql-master") split(".dns.podman") join("")
    mysql_master_data_source:
      type: string
      env: DATA_SOURCE_NAME
      value: <- `root:${mysql_database_root_password}@(${mysql-master-host}:3306)/${mysql_database_name}`
  containers:
    mysql-master-prom-exporter:
      image: prom/mysqld-exporter

promethues-mysql-slave-exporter: 
  defines: runnable
  variables:
    database_name:
      type: string
      env: MYSQL_DATABASE
      value: <- $mysql_database_name
    mysql-slave-host:
      env: MYSQL_SLAVE_HOST
      type: string
      value: <- get-hostname("monk-mysql-proxysql/slave", "mysql-slave") split(".dns.podman") join("")
    mysql_master_data_source:
      type: string
      env: DATA_SOURCE_NAME
      value: <- `root:${mysql_database_root_password}@(${mysql-slave-host}:3306)/${mysql_database_name}`
  containers:
    mysql-slave-prom-exporter:
      image: prom/mysqld-exporter

promethues: 
  defines: runnable
  variables:
    mysql-exporter-master:
      type: string
      value: <- get-hostname("monk-mysql-proxysql/promethues-mysql-master-exporter", "mysql-master-prom-exporter") split(".dns.podman") join("")
    mysql-exporter-slave:
      type: string
      value: <- get-hostname("monk-mysql-proxysql/promethues-mysql-slave-exporter", "mysql-slave-prom-exporter") split(".dns.podman") join("")
  containers:
    mysql-promethues:
      image: prom/prometheus
      ports:
        - 9090:9090
  files:
    defines: files
    my-file:
      contents: |
        global:
          scrape_interval: 15s # By default, scrape targets every 15 seconds.

          # Attach these labels to any time series or alerts when communicating with
          # external systems (federation, remote storage, Alertmanager).
          external_labels:
            monitor: "codelab-monitor"

        # A scrape configuration containing exactly one endpoint to scrape:
        # Here it's Prometheus itself.
        scrape_configs:
          # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config.
          - job_name: "prometheus"

            # Override the global default and scrape targets from this job every 5 seconds.
            scrape_interval: 5s
            static_configs:
              - targets: [
                  "{{ v "mysql-exporter-master" }}:9104",
                  "{{ v "mysql-exporter-slave" }}:9104",
                ]
      container: mysql-promethues
      path: /etc/prometheus/prometheus.yml
      mode: 644

grafana: 
  defines: runnable
  containers:
    mysql-grafana:
      image: grafana/grafana
      ports:
        - 3000:3000